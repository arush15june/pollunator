{"version":3,"sources":["StationList.js","API.js","Helpers.js","Subscriber.js","Station.js","MinHeap.js","Stations.js","TopNavBar.js","App.js","serviceWorker.js","index.js"],"names":["StationList","this","props","stationList","map","station","react_default","a","createElement","value","station_id","station_name","station_options","stationsRenderList","Fragment","Form_default","onChange","selectHandler","Group","controlId","Label","Control","as","Component","URL","STATIONS_URL","concat","PUBLIC_KEY_URL","SUBSCRIBE_URL","urlBase64ToUint8Array","_callee","base64String","padding","base64","rawData","regenerator_default","wrap","_context","prev","next","repeat","length","replace","window","atob","abrupt","Uint8Array","from","Object","toConsumableArray","char","charCodeAt","stop","getPublicKeyArray","_callee2","response","key","_context2","fetch","sent","text","Subscriber","_this","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","onSubmitHandler","_ref","asyncToGenerator","mark","event","preventDefault","console","log","subscribe","_x","apply","arguments","state","email","clicked","permission","subscripton","subscriptionResponse","subscription","subscribe_body","notify_time","method","headers","Content-Type","body","JSON","stringify","susbcribe_request","subscribe_json","json","Notification","requestPermission","permissionResult","registration","_ask_permission","setState","public_key","options","userVisibleOnly","applicationServerKey","pushManager","_push_subscription","susbcription_response","navigator","serviceWorker","ready","then","_this2","_subscribe","onSubmit","type","placeholder","Button_default","variant","Station","stationData","parameters","param","name","className","date","obj","station_data","keys","Card_default","Header","Body","Title","status","Text","latitude","longitude","src_Subscriber","_parameter_list","MinHeap","capacity","getValueMethod","heapSize","heap","Array","fill","getValue","Error","siftUp","i","j","index","minIndex","n","lc","rc","swap","siftDown","parent","Math","ceil","result","StationsContainer","selectChangeHandler","selectedStation","target","fetchStationData","stationDistanceList","coords","API_URL","station_data_request","station_data_json","station_el","filter","st","undefined","geolocation","setCoordState","pos","setStationOnEuclideanDistance","getCurrentPosition","x1","y1","x2","y2","sqrt","pow","lat","long","mh","distance","station_lat","station_long","euclideanDistance","insert","setSelectedStationFromStation","stationsRequest","stationsData","selectedStationData","fetchStations","setSelectedStationFromIndex","setUserCoordinates","Container_default","Row_default","Col_default","src_StationList","src_Station","TopNavBar","Navbar_default","bg","Brand","App","src_TopNavBar","Stations","isLocalhost","Boolean","location","hostname","match","registerValidSW","swUrl","config","register","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","catch","error","ReactDOM","render","src_App_0","document","getElementById","process","href","origin","addEventListener","contentType","get","indexOf","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.2eb17da3.chunk.js","sourcesContent":["import React, { Component } from 'react'\r\nimport Form from 'react-bootstrap/Form'\r\n\r\nclass StationList extends Component {\r\n\r\n  stationsRenderList() {\r\n    let station_list = this.props.stationList   \r\n    let render_list = station_list.map( station => {\r\n      return <option value={station.station_id}>{station.station_name}</option>\r\n    })\r\n    return render_list\r\n  }\r\n\r\n  render() {\r\n    let station_options = this.stationsRenderList()\r\n    return (\r\n      <React.Fragment>\r\n        <Form onChange={this.props.selectHandler}>\r\n          <Form.Group controlId='formStationsList'>\r\n            <Form.Label>Stations</Form.Label>\r\n            <Form.Control controlId=\"station\" as='select'>\r\n              {station_options}\r\n            </Form.Control>\r\n          </Form.Group>\r\n        </Form>\r\n      </React.Fragment>\r\n    )\r\n  }\r\n}\r\n\r\nexport default StationList","const URL = 'http://localhost:5000'\r\nconst STATIONS_URI = '/api/stations'\r\nconst PUBLIC_KEY_URI = '/api/publickey'\r\nconst SUBSCRIBE_URI = '/api/subscription'\r\n\r\nconst STATIONS_URL = `${URL}${STATIONS_URI}`\r\nconst PUBLIC_KEY_URL = `${URL}${PUBLIC_KEY_URI}`\r\nconst SUBSCRIBE_URL = `${URL}${SUBSCRIBE_URI}`\r\n\r\nexport default URL;\r\nexport { STATIONS_URL, PUBLIC_KEY_URL, SUBSCRIBE_URL }\r\n","import { PUBLIC_KEY_URL } from './API.js'\r\n\r\nasync function urlBase64ToUint8Array(base64String) {\r\n    const padding = '='.repeat((4 - base64String.length % 4) % 4);\r\n    const base64 = (base64String + padding)\r\n        .replace(/\\-/g, '+')\r\n        .replace(/_/g, '/')\r\n    ;\r\n    const rawData = window.atob(base64);\r\n    return Uint8Array.from([...rawData].map((char) => char.charCodeAt(0)));\r\n}\r\n\r\nasync function getPublicKeyArray() {\r\n    const response = await fetch(PUBLIC_KEY_URL)\r\n    const key = await response.text()\r\n\r\n    return urlBase64ToUint8Array(key)\r\n}\r\n\r\nexport { urlBase64ToUint8Array, getPublicKeyArray }","import React, { Component } from 'react'\r\nimport Form from 'react-bootstrap/Form'\r\nimport Button from 'react-bootstrap/Button'\r\n\r\nimport { urlBase64ToUint8Array, getPublicKeyArray } from './Helpers'\r\nimport { SUBSCRIBE_URL } from './API'\r\n\r\nclass Subscriber extends Component {\r\n  constructor(props) {\r\n    super(props)\r\n    this.state = {\r\n      email: '',\r\n      clicked: false,\r\n      permission: false,\r\n      subscripton: {},\r\n      subscriptionResponse: {},\r\n    }\r\n  }\r\n\r\n  async _push_susbcription(subscription) {\r\n    const email = this.state.email\r\n    const station_id = this.props.station_id;\r\n    const notify_time = '09:00'\r\n\r\n    const subscribe_body = {\r\n      station_id: station_id,\r\n      notify_time: notify_time,\r\n      email: email,\r\n      subscription: subscription\r\n    }\r\n    \r\n    const susbcribe_request = await fetch(SUBSCRIBE_URL, {\r\n      method: 'POST',\r\n      headers: {\r\n        'Content-Type': 'application/json'\r\n      },\r\n      body: JSON.stringify(subscribe_body)\r\n    })\r\n\r\n    const subscribe_json = susbcribe_request.json()\r\n\r\n    return subscribe_json\r\n  }\r\n  \r\n  async _ask_permission() {\r\n    const permissionResult = await Notification.requestPermission()\r\n    return permissionResult\r\n  }\r\n\r\n  async _subscribe(registration) {\r\n    console.log('_subscribe')\r\n    const permissionResult = await this._ask_permission()\r\n    \r\n    if (permissionResult === 'granted') {\r\n      this.setState({\r\n        permission: true\r\n      })\r\n\r\n      const public_key = getPublicKeyArray()\r\n      const options = {\r\n        userVisibleOnly: true,\r\n        applicationServerKey: urlBase64ToUint8Array(public_key)\r\n      }\r\n\r\n      const subscription = await registration.pushManager.subscribe(options)\r\n      this.setState({\r\n        subscription: subscription\r\n      })\r\n\r\n      let susbcription_response = await this._push_subscription(subscription)\r\n      this.setState({\r\n        subscriptionResponse: susbcription_response\r\n      })\r\n    }\r\n  }\r\n  \r\n  async subscribe() {\r\n    if ('serviceWorker' in navigator) {\r\n      console.log('subscribe::start')\r\n      navigator.serviceWorker.ready.then((registration) => {\r\n        console.log('subscribe::promise')\r\n        console.log(registration)\r\n        this._subscribe(registration)\r\n      })\r\n    }\r\n  }\r\n  \r\n  onSubmitHandler = async (event) => {\r\n    event.preventDefault()\r\n    console.log('onSubmitHandler')\r\n    this.subscribe()\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <React.Fragment>\r\n        <Form onSubmit={this.onSubmitHandler}>\r\n          <Form.Group controlId=\"formButton\">\r\n            <Form.Control type=\"email\" placeholder=\"Enter email\" />\r\n          </Form.Group>\r\n          <Button variant=\"primary\" type=\"submit\">\r\n            Get Notified Daily!\r\n          </Button>\r\n        </Form>\r\n      </React.Fragment>\r\n    )\r\n  }\r\n}\r\n\r\nexport default Subscriber;","import React, { Component } from 'react';\r\nimport Card from 'react-bootstrap/Card'\r\n\r\nimport Subscriber from './Subscriber'\r\n\r\nfunction isEmpty(obj) {\r\n  return Object.keys(obj).length === 0;\r\n}\r\n\r\nclass Station extends Component { \r\n  \r\n    _parameter_list() {\r\n      const parameters = this.props.stationData.parameters.parameters\r\n      const param_list = parameters.map(param => {\r\n        return <p>{param.name}: <span className='font-weight-bold'>{param.value}</span> {param.date}</p>\r\n      })\r\n\r\n      return param_list      \r\n    }\r\n  \r\n    render() {\r\n      let station_data = this.props.stationData\r\n\r\n      return (\r\n        <React.Fragment>\r\n          { !isEmpty(station_data) ? (                         \r\n            <Card>\r\n              <Card.Header>{station_data.station_name}</Card.Header>\r\n              <Card.Body>\r\n                <Card.Title>{station_data.status}</Card.Title>\r\n                <Card.Text>\r\n                  Latitude: {station_data.latitude} Longitude: {station_data.longitude} Timestamp: {station_data.parameters.date}\r\n                </Card.Text>\r\n                <Card.Text>\r\n                  <Subscriber station_id={this.props.stationData.station_id} />\r\n                </Card.Text>\r\n                <Card.Text>\r\n                  {this._parameter_list()}\r\n                </Card.Text>\r\n                {/* <Button variant=\"primary\">Go somewhere</Button> */}\r\n              </Card.Body>\r\n            </Card>\r\n            ) : (\r\n              <React.Fragment></React.Fragment>\r\n            )\r\n          }\r\n        </React.Fragment>\r\n      )\r\n    }\r\n}\r\n\r\nexport default Station;","class MinHeap {\r\n    constructor(capacity, getValueMethod){\r\n        this.heapSize = -1;\r\n        this.heap = Array(capacity).fill(-1)\r\n        this.getValue = getValueMethod\r\n    }\r\n    \r\n    insert(value){\r\n        if(this.heapSize+1 === this.heap.length){\r\n            throw Error(\"Overflow Size\")\r\n        }\r\n        this.heap[this.heapSize + 1] = value\r\n        this.heapSize = this.heapSize + 1\r\n        this.siftUp(this.heapSize);\r\n    }\r\n    \r\n    swap(i,j){\r\n        [this.heap[i],this.heap[j]] = [this.heap[j],this.heap[i]]\r\n    }\r\n    \r\n    siftDown(index){\r\n        let minIndex = index\r\n        let n = this.heap.length\r\n        let lc = 2*index + 1\r\n        if(lc<=n-1 && this.getValue(this.heap[lc]) < this.getValue(this.heap[minIndex]) ) minIndex=lc\r\n        let rc = 2*index + 2\r\n        if(rc<=n-1 && this.getValue(this.heap[lc]) < this.getValue(this.heap[minIndex]) ) minIndex=rc\r\n\r\n        if(minIndex !== index){\r\n            this.swap(index,minIndex)\r\n            this.siftDown(minIndex)\r\n        }\r\n    }\r\n    \r\n    siftUp(index){\r\n        let parent  = Math.ceil((index-1)/2)\r\n        while(index>0 && this.getValue(this.heap[parent]) > this.getValue(this.heap[index]) ){\r\n            this.swap(index,parent)\r\n            index = parent\r\n            parent = Math.ceil((index-1)/2)\r\n        }\r\n    }\r\n\r\n    extractMin(){\r\n        let result  = this.heap[0]\r\n        this.heap[0] = this.heap[this.heapSize]\r\n        this.heapSize = this.heapSize - 1\r\n        this.siftDown(0)\r\n        return result\r\n    }\r\n\r\n}\r\n\r\nexport default MinHeap","import React, { Component } from 'react';\r\nimport Container from 'react-bootstrap/Container'\r\nimport Row from 'react-bootstrap/Row'\r\nimport Col from 'react-bootstrap/Col'\r\n\r\nimport StationList from './StationList'\r\nimport Station from './Station'\r\n\r\nimport MinHeap from './MinHeap'\r\n\r\nimport { STATIONS_URL } from './API'\r\n\r\nclass StationsContainer extends Component {\r\n  constructor(props) {\r\n    super(props)\r\n    this.state = {\r\n      stationList: [],\r\n      stationDistanceList: [],\r\n      coords: {},\r\n      selectedStation: {}\r\n    }\r\n  }\r\n\r\n  async fetchStationData(station_id) {\r\n    let API_URL = `${STATIONS_URL}/${station_id}`\r\n    let station_data_request = await fetch(API_URL);\r\n    let station_data_json = await station_data_request.json()\r\n\r\n    return station_data_json\r\n  }\r\n\r\n  getStationFromStationId(station_id) {\r\n    let station_el = this.state.stationList.filter( st => \r\n      st.station_id === station_id \r\n    )[0]\r\n\r\n    if (station_el === undefined) return {}\r\n\r\n    return station_el\r\n  }\r\n  \r\n  async setUserCoordinates() {\r\n    const geolocation = navigator.geolocation\r\n    \r\n    let setCoordState = (pos) => {\r\n      this.setState({\r\n        coords: pos\r\n      })\r\n      this.setStationOnEuclideanDistance()\r\n    }\r\n    \r\n    if (geolocation) { \r\n      await geolocation.getCurrentPosition(setCoordState)\r\n    }\r\n  }\r\n\r\n  selectChangeHandler = async (event) => {\r\n    this.setState({\r\n      selectedStation: {}\r\n    })\r\n    \r\n    let station_id = event.target.value\r\n    let station_data = await this.fetchStationData(station_id)\r\n\r\n    this.setState({\r\n      selectedStation: station_data\r\n    })\r\n  }\r\n  \r\n  euclideanDistance(x1, y1, x2, y2) {\r\n    return Math.sqrt(Math.pow(x1 - x2, 2) + Math.pow(y1 - y2, 2))\r\n  }\r\n  \r\n  async setStationOnEuclideanDistance() {\r\n    if (this.state.coords.length !== 0 && this.state.stationList.length !== 0) {\r\n      let lat = this.state.coords.coords.latitude\r\n      let long = this.state.coords.coords.longitude\r\n      \r\n      let mh = new MinHeap(this.state.stationList.length, (station) => {\r\n        return station.distance\r\n      })\r\n\r\n      for (let i = 0; i < this.state.stationList.length; i++) {\r\n        let station = this.state.stationList[i]\r\n        let station_lat = station.latitude\r\n        let station_long = station.longitude\r\n        let distance = this.euclideanDistance(lat, long, station_lat, station_long)\r\n        \r\n        station.distance = distance\r\n        mh.insert(station)\r\n      }\r\n      \r\n      mh.heap[0].station_name += ' [Nearest Geolocated Station]'\r\n      \r\n      this.setState({\r\n        selectedStation: {}\r\n      })\r\n      await this.setSelectedStationFromStation(mh.heap[0])\r\n\r\n      this.setState({\r\n        stationList: mh.heap\r\n      })\r\n    }\r\n  }\r\n  \r\n  async fetchStations() {\r\n    let stationsRequest = await fetch(STATIONS_URL)\r\n    let stationsData = await stationsRequest.json()\r\n        \r\n    this.setState({\r\n        stationList: stationsData\r\n      }\r\n    )\r\n  }\r\n\r\n  async setSelectedStationFromStation(station) {\r\n    let selectedStationData = await this.fetchStationData(station.station_id)\r\n\r\n    this.setState({\r\n      selectedStation: selectedStationData\r\n    })\r\n  }\r\n  \r\n  async setSelectedStationFromIndex(index) {\r\n    let station = this.state.stationList[index]\r\n    await this.setSelectedStationFromStation(station)\r\n  }\r\n  \r\n  async componentDidMount() {\r\n    await this.fetchStations()\r\n    await this.setSelectedStationFromIndex(0)\r\n    this.setUserCoordinates()\r\n  }\r\n  \r\n  render() {\r\n    return (\r\n      <React.Fragment>\r\n        <Container>\r\n          <Row>\r\n            <Col>\r\n              <StationList stationList={this.state.stationList} selectHandler={this.selectChangeHandler}/>\r\n            </Col>\r\n          </Row>\r\n          <Row>\r\n            <Col>\r\n              <Station stationData={this.state.selectedStation} />\r\n            </Col>\r\n          </Row>\r\n        </Container>\r\n      </React.Fragment>\r\n    )\r\n  }\r\n}\r\n\r\nexport default StationsContainer;","import React, { Component } from 'react';\r\nimport Navbar from 'react-bootstrap/Navbar'\r\n\r\n// import logo from './logo.svg';\r\nimport './App.css';\r\n\r\nclass TopNavBar extends Component {\r\n  render() {\r\n    return (\r\n      <React.Fragment>\r\n        <Navbar bg=\"dark\" variant=\"dark\">\r\n          <Navbar.Brand>Pollunator</Navbar.Brand>\r\n        </Navbar>\r\n      </React.Fragment>\r\n    )\r\n  }\r\n}\r\n\r\nexport default TopNavBar;\r\n","import React, { Component } from 'react';\nimport StationsContainer from './Stations'\nimport TopNavBar from './TopNavBar'\n\n// import logo from './logo.svg';\nimport './App.css';\n\nclass App extends Component {\n  render() {\n    return (\n      <React.Fragment>\n        <TopNavBar />\n        <StationsContainer />\n      </React.Fragment>\n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n              \r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();"],"sourceRoot":""}