{"version":3,"sources":["StationList.js","API.js","Helpers.js","Subscriber.js","Parameter.js","Station.js","MinHeap.js","Stations.js","TopNavBar.js","App.js","serviceWorker.js","index.js"],"names":["StationList","this","props","stationList","map","station","react_default","a","createElement","value","station_id","station_name","station_options","stationsRenderList","Fragment","Form_default","onChange","selectHandler","Group","controlId","Label","Control","as","Component","STATIONS_URL","concat","PUBLIC_KEY_URL","SUBSCRIBE_URL","urlBase64ToUint8Array","base64String","base64","repeat","length","replace","rawData","window","atob","Uint8Array","from","Object","toConsumableArray","char","charCodeAt","getPublicKeyArray","_callee","response","key","regenerator_default","wrap","_context","prev","next","fetch","sent","text","abrupt","stop","Subscriber","_this","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","onSubmitHandler","_ref","asyncToGenerator","mark","event","email","preventDefault","target","setState","subscribe","_x","apply","arguments","_timeChangeHandler","time","select_time","Date","hours","getHours","minutes","getMinutes","notify_time","state","clicked","permission","subscripton","subscriptionResponse","subscription","subscribe_body","method","headers","Content-Type","body","JSON","stringify","susbcribe_request","subscribe_json","json","Notification","requestPermission","permissionResult","registration","_ask_permission","public_key","options","userVisibleOnly","applicationServerKey","pushManager","_push_subscription","susbcription_response","navigator","serviceWorker","ready","_subscribe","onSubmit","Row_default","Col_default","sm","bundle_default","name","type","placeholder","Button_default","variant","Card_default","Text","error","Parameter","param","parameterData","style","width","Body","Title","dist_default","date","Station","stationData","parameters","src_Parameter","obj","station_data","keys","hasOwnProperty","isStructured","Header","status","latitude","longitude","CardColumns_default","_parameter_list","src_Subscriber","className","MinHeap","capacity","getValueMethod","heapSize","heap","Array","fill","getValue","Error","siftUp","i","j","index","minIndex","n","lc","rc","swap","siftDown","parent","Math","ceil","result","StationsContainer","selectChangeHandler","selectedStation","fetchStationData","stationDistanceList","coords","station_el","filter","st","undefined","API_URL","station_data_request","station_data_json","getStationFromStationId","geolocation","setCoordState","_callee3","pos","_context3","_this2","setStationOnEuclideanDistance","getCurrentPosition","x1","y1","x2","y2","sqrt","pow","lat","long","mh","distance","station_lat","station_long","euclideanDistance","insert","setSelectedStationFromIndex","stationsRequest","stationsData","selectedStationData","setSelectedStationFromStation","fetchStations","setUserCoordinates","Container_default","src_StationList","src_Station","TopNavBar","Navbar_default","bg","Brand","App","src_TopNavBar","Stations","isLocalhost","Boolean","location","hostname","match","registerValidSW","swUrl","config","register","then","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","catch","ReactDOM","render","src_App_0","document","getElementById","URL","process","href","origin","addEventListener","contentType","get","indexOf","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.2c3a3966.chunk.js","sourcesContent":["import React, { Component } from 'react'\nimport Form from 'react-bootstrap/Form'\n\nclass StationList extends Component {\n\n  stationsRenderList() {\n    let station_list = this.props.stationList   \n    let render_list = station_list.map( station => {\n      return <option value={station.station_id}>{station.station_name}</option>\n    })\n    return render_list\n  }\n\n  render() {\n    let station_options = this.stationsRenderList()\n    return (\n      <React.Fragment>\n        <Form onChange={this.props.selectHandler}>\n          <Form.Group controlId='formStationsList'>\n            <Form.Label>Stations</Form.Label>\n            <Form.Control controlId=\"station\" as='select'>\n              {station_options}\n            </Form.Control>\n          </Form.Group>\n        </Form>\n      </React.Fragment>\n    )\n  }\n}\n\nexport default StationList","const URL = ''\r\nconst STATIONS_URI = '/api/stations'\r\nconst PUBLIC_KEY_URI = '/api/publickey'\r\nconst SUBSCRIBE_URI = '/api/subscribe'\r\n\r\nconst STATIONS_URL = `${URL}${STATIONS_URI}`\r\nconst PUBLIC_KEY_URL = `${URL}${PUBLIC_KEY_URI}`\r\nconst SUBSCRIBE_URL = `${URL}${SUBSCRIBE_URI}`\r\n\r\nexport default URL;\r\nexport { STATIONS_URL, PUBLIC_KEY_URL, SUBSCRIBE_URL }\r\n","import { PUBLIC_KEY_URL } from './API.js'\r\n\r\nfunction urlBase64ToUint8Array(base64String) {\r\n    const padding = '='.repeat((4 - base64String.length % 4) % 4);\r\n    const base64 = (base64String + padding)\r\n        .replace(/\\-/g, '+')\r\n        .replace(/_/g, '/')\r\n    ;\r\n    const rawData = window.atob(base64);\r\n    return Uint8Array.from([...rawData].map((char) => char.charCodeAt(0)));\r\n}\r\n\r\nasync function getPublicKeyArray() {\r\n    const response = await fetch(PUBLIC_KEY_URL)\r\n    const key = await response.text()\r\n\r\n    return await urlBase64ToUint8Array(key)\r\n}\r\n\r\nexport { urlBase64ToUint8Array, getPublicKeyArray }","import React, { Component } from 'react'\r\nimport Form from 'react-bootstrap/Form'\r\nimport Button from 'react-bootstrap/Button'\r\nimport Card from 'react-bootstrap/Card'\r\nimport Row from 'react-bootstrap/Row'\r\nimport Col from 'react-bootstrap/Col'\r\nimport TimePicker from 'react-bootstrap-time-picker';\r\n\r\nimport { getPublicKeyArray } from './Helpers'\r\nimport { SUBSCRIBE_URL } from './API'\r\n\r\nclass Subscriber extends Component {\r\n  constructor(props) {\r\n    super(props)\r\n    this.state = {\r\n      email: '',\r\n      clicked: false,\r\n      permission: false,\r\n      subscripton: {},\r\n      subscriptionResponse: {},\r\n      notify_time: '09:00'\r\n    }\r\n  }\r\n\r\n  async _push_subscription(subscription) {\r\n    const email = this.state.email\r\n    const station_id = this.props.station_id;\r\n    const notify_time = this.state.notify_time\r\n\r\n    const subscribe_body = {\r\n      station_id: station_id,\r\n      notify_time: notify_time,\r\n      email: email,\r\n      subscription: subscription,\r\n      notify_time: notify_time\r\n    }\r\n    \r\n    const susbcribe_request = await fetch(SUBSCRIBE_URL, {\r\n      method: 'POST',\r\n      headers: {\r\n        'Content-Type': 'application/json'\r\n      },\r\n      body: JSON.stringify(subscribe_body)\r\n    })\r\n\r\n    const subscribe_json = susbcribe_request.json()\r\n\r\n    return subscribe_json\r\n  }\r\n  \r\n  async _ask_permission() {\r\n    const permissionResult = await Notification.requestPermission()\r\n    return permissionResult\r\n  }\r\n\r\n  async _subscribe(registration) {\r\n    const permissionResult = await this._ask_permission()\r\n    \r\n    if (permissionResult === 'granted') {\r\n      this.setState({\r\n        permission: true\r\n      })\r\n\r\n      const public_key = await getPublicKeyArray()\r\n\r\n      const options = {\r\n        userVisibleOnly: true,\r\n        applicationServerKey: public_key\r\n      }\r\n\r\n      const subscription = await registration.pushManager.subscribe(options)\r\n      this.setState({\r\n        subscription: subscription\r\n      })\r\n\r\n      let susbcription_response = await this._push_subscription(subscription)\r\n      this.setState({\r\n        subscriptionResponse: susbcription_response\r\n      })\r\n    }\r\n  }\r\n  \r\n  async subscribe() {\r\n    if ('serviceWorker' in navigator) {\r\n      const registration = await navigator.serviceWorker.ready\r\n      this._subscribe(registration)\r\n    }\r\n  }\r\n  \r\n  onSubmitHandler = async (event) => {\r\n    event.preventDefault()\r\n    const email = event.target.email.value\r\n    this.setState({\r\n      email: email\r\n    })\r\n    await this.subscribe()\r\n  }\r\n\r\n  _timeChangeHandler = (time) => {\r\n    let select_time = new Date(0, 0, 0, 0, 0, time, 0)\r\n    let hours = select_time.getHours()\r\n    let minutes = select_time.getMinutes()\r\n\r\n    this.setState({\r\n      notify_time: `${hours}:${minutes}`\r\n    })\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <React.Fragment>\r\n        <Form onSubmit={this.onSubmitHandler}>\r\n          <Form.Group controlId=\"formEmail\">\r\n            <Row>\r\n              <Col sm={3}>\r\n                <TimePicker onChange={this._timeChangeHandler} value={this.state.notify_time} />\r\n              </Col>\r\n              <Col>\r\n                <Form.Control name='email' type=\"email\" placeholder=\"Enter email\" />\r\n              </Col>\r\n            </Row>\r\n          </Form.Group>\r\n          <Button variant=\"primary\" type=\"submit\">\r\n            Get Notified Daily!\r\n          </Button>\r\n          { <Card.Text>{this.state.subscriptionResponse.error}</Card.Text> ? 'error' in this.state.subscriptionResponse : <React.Fragment></React.Fragment>}\r\n        </Form>\r\n      </React.Fragment>\r\n    )\r\n  }\r\n}\r\n\r\nexport default Subscriber;","import React, { Component } from 'react'\r\nimport Card from 'react-bootstrap/Card'\r\nimport Moment from 'react-moment'\r\n\r\nclass Parameter extends Component {\r\n  render() {\r\n    const param = this.props.parameterData\r\n    \r\n    return (\r\n      <React.Fragment>\r\n        <Card style={{ width: '18rem' }}>\r\n          <Card.Body>\r\n            <Card.Title>{param.name} | {param.value}</Card.Title>\r\n            <Card.Text>\r\n              \r\n            </Card.Text>\r\n            <Card.Text>\r\n              <Moment>{param.date}</Moment>\r\n            </Card.Text>\r\n          </Card.Body>\r\n        </Card>                                                     \r\n      </React.Fragment>\r\n    )\r\n  }\r\n}\r\n\r\nexport default Parameter","import React, { Component } from 'react';\r\nimport Card from 'react-bootstrap/Card'\r\nimport CardColumns from 'react-bootstrap/CardColumns'\r\n\r\nimport Subscriber from './Subscriber'\r\nimport Parameter from './Parameter'\r\n\r\nimport Moment from 'react-moment';\r\n\r\nfunction isEmpty(obj) {\r\n  return Object.keys(obj).length === 0;\r\n}\r\n\r\nfunction isStructured(obj) {\r\n  return obj.hasOwnProperty('station_id') && obj.hasOwnProperty('parameters')\r\n}\r\n\r\nclass Station extends Component { \r\n\r\n    _parameter_list() {\r\n      const parameters = this.props.stationData.parameters.parameters\r\n      const param_list = parameters.map(param => {\r\n        return <Parameter parameterData={param} />\r\n      })\r\n\r\n      return param_list      \r\n    }\r\n  \r\n    render() {\r\n      let station_data = this.props.stationData\r\n\r\n      return (\r\n        <React.Fragment>\r\n          { !isEmpty(station_data) ? (isStructured(station_data) ? (                         \r\n            <Card>\r\n              <Card.Header>{station_data.station_name}</Card.Header>\r\n              <Card.Body>\r\n                <Card.Title>{station_data.status}</Card.Title>\r\n                <Card.Text>\r\n                  Latitude: {station_data.latitude} Longitude: {station_data.longitude} Timestamp: <Moment>{station_data.parameters.date}</Moment>\r\n                </Card.Text>\r\n                <CardColumns>\r\n                  {this._parameter_list()}\r\n                </CardColumns>\r\n                <Card.Text>\r\n                  <Subscriber station_id={this.props.stationData.station_id} />\r\n                </Card.Text>\r\n                {/* <Button variant=\"primary\">Go somewhere</Button> */}\r\n              </Card.Body>\r\n            </Card>\r\n            ) : (\r\n              <React.Fragment>\r\n                <Card>\r\n                  <Card.Header>\r\n                    {station_data.station_name}\r\n                  </Card.Header>\r\n                  <Card.Header>\r\n                    <Card.Text className='font-weight-bold'>Station Data Unvailable</Card.Text>\r\n                  </Card.Header>\r\n                </Card>\r\n              </React.Fragment>\r\n            )) : <React.Fragment></React.Fragment>\r\n          }\r\n        </React.Fragment>\r\n      )\r\n    }\r\n}\r\n\r\nexport default Station;","class MinHeap {\r\n    constructor(capacity, getValueMethod){\r\n        this.heapSize = -1;\r\n        this.heap = Array(capacity).fill(-1)\r\n        this.getValue = getValueMethod\r\n    }\r\n    \r\n    insert(value){\r\n        if(this.heapSize+1 === this.heap.length){\r\n            throw Error(\"Overflow Size\")\r\n        }\r\n        this.heap[this.heapSize + 1] = value\r\n        this.heapSize = this.heapSize + 1\r\n        this.siftUp(this.heapSize);\r\n    }\r\n    \r\n    swap(i,j){\r\n        [this.heap[i],this.heap[j]] = [this.heap[j],this.heap[i]]\r\n    }\r\n    \r\n    siftDown(index){\r\n        let minIndex = index\r\n        let n = this.heap.length\r\n        let lc = 2*index + 1\r\n        if(lc<=n-1 && this.getValue(this.heap[lc]) < this.getValue(this.heap[minIndex]) ) minIndex=lc\r\n        let rc = 2*index + 2\r\n        if(rc<=n-1 && this.getValue(this.heap[lc]) < this.getValue(this.heap[minIndex]) ) minIndex=rc\r\n\r\n        if(minIndex !== index){\r\n            this.swap(index,minIndex)\r\n            this.siftDown(minIndex)\r\n        }\r\n    }\r\n    \r\n    siftUp(index){\r\n        let parent  = Math.ceil((index-1)/2)\r\n        while(index>0 && this.getValue(this.heap[parent]) > this.getValue(this.heap[index]) ){\r\n            this.swap(index,parent)\r\n            index = parent\r\n            parent = Math.ceil((index-1)/2)\r\n        }\r\n    }\r\n\r\n    extractMin(){\r\n        let result  = this.heap[0]\r\n        this.heap[0] = this.heap[this.heapSize]\r\n        this.heapSize = this.heapSize - 1\r\n        this.siftDown(0)\r\n        return result\r\n    }\r\n\r\n}\r\n\r\nexport default MinHeap","import React, { Component } from 'react';\r\nimport Container from 'react-bootstrap/Container'\r\nimport Row from 'react-bootstrap/Row'\r\nimport Col from 'react-bootstrap/Col'\r\n\r\nimport StationList from './StationList'\r\nimport Station from './Station'\r\n\r\nimport MinHeap from './MinHeap'\r\n\r\nimport { STATIONS_URL } from './API'\r\n\r\nclass StationsContainer extends Component {\r\n  constructor(props) {\r\n    super(props)\r\n    this.state = {\r\n      stationList: [],\r\n      stationDistanceList: [],\r\n      coords: {},\r\n      selectedStation: {}\r\n    }\r\n  }\r\n  \r\n  getStationFromStationId(station_id) {\r\n    let station_el = this.state.stationList.filter( st =>\r\n      st.station_id === station_id\r\n    )[0]\r\n\r\n    if (station_el === undefined) return {}\r\n\r\n    return station_el\r\n  }\r\n\r\n  async fetchStationData(station_id) {\r\n    let API_URL = `${STATIONS_URL}/${station_id}`\r\n    let station_data_request = await fetch(API_URL)\r\n    let station_data_json = await station_data_request.json()\r\n    \r\n    // Fallback to stationList\r\n    if (station_data_request.status !== 200) {\r\n      station_data_json = this.getStationFromStationId(station_id)\r\n    }\r\n\r\n    return station_data_json\r\n  }\r\n\r\n\r\n  async setUserCoordinates() {\r\n    const geolocation = navigator.geolocation\r\n\r\n    let setCoordState = async (pos) => {\r\n      this.setState({\r\n        coords: pos\r\n      })\r\n      this.setStationOnEuclideanDistance()\r\n    }\r\n\r\n    if (geolocation) {\r\n      await geolocation.getCurrentPosition(setCoordState)\r\n    }\r\n  }\r\n\r\n  selectChangeHandler = async (event) => {\r\n    this.setState({\r\n      selectedStation: {}\r\n    })\r\n\r\n    let station_id = event.target.value\r\n    let station_data = await this.fetchStationData(station_id)\r\n\r\n    this.setState({\r\n      selectedStation: station_data\r\n    })\r\n  }\r\n\r\n  euclideanDistance(x1, y1, x2, y2) {\r\n    return Math.sqrt(Math.pow(x1 - x2, 2) + Math.pow(y1 - y2, 2))\r\n  }\r\n\r\nasync setStationOnEuclideanDistance() {\r\n  let lat, long;\r\n  if (this.state.coords.length !== 0 && this.state.stationList.length !== 0) {\r\n    lat = this.state.coords.coords.latitude\r\n    long = this.state.coords.coords.longitude\r\n  }\r\n\r\n  let mh = new MinHeap(this.state.stationList.length, (station) => {\r\n      return station.distance\r\n  })\r\n\r\n  for (let i = 0; i < this.state.stationList.length; i++) {\r\n    let station = this.state.stationList[i]\r\n    let station_lat = station.latitude\r\n    let station_long = station.longitude\r\n    let distance = this.euclideanDistance(lat, long, station_lat, station_long)\r\n\r\n    station.distance = distance\r\n    mh.insert(station)\r\n  }\r\n\r\n  mh.heap[0].station_name += ' [Nearest Geolocated Station]'\r\n\r\n  this.setState({\r\n    selectedStation: {},\r\n    stationList: mh.heap\r\n  })\r\n\r\n  await this.setSelectedStationFromIndex(0)\r\n}\r\n\r\nasync fetchStations() {\r\n  let stationsRequest = await fetch(STATIONS_URL)\r\n  let stationsData = await stationsRequest.json()\r\n\r\n  this.setState({\r\n      stationList: stationsData,\r\n      selectedStation: stationsData[0]\r\n    }\r\n  )\r\n}\r\n\r\nasync setSelectedStationFromStation(station) {\r\n  let selectedStationData = await this.fetchStationData(station.station_id)\r\n\r\n  this.setState({\r\n    selectedStation: selectedStationData\r\n  })\r\n}\r\n\r\nasync setSelectedStationFromIndex(index) {\r\n  let station = this.state.stationList[index]\r\n  await this.setSelectedStationFromStation(station)\r\n}\r\n\r\nasync componentDidMount() {\r\n  await this.fetchStations()\r\n  await this.setUserCoordinates()\r\n  await this.setSelectedStationFromIndex(0)\r\n}\r\n\r\nrender() {\r\nreturn (\r\n  <React.Fragment>\r\n    <Container>\r\n      <Row>\r\n        <Col>\r\n          <StationList stationList={this.state.stationList} selectHandler={this.selectChangeHandler}/>\r\n        </Col>\r\n        </Row>\r\n        <Row>\r\n          <Col>\r\n            <Station stationData={this.state.selectedStation} />\r\n          </Col>\r\n        </Row>\r\n        </Container>\r\n      </React.Fragment>\r\n    )\r\n  }\r\n}\r\n\r\nexport default StationsContainer;\r\n","import React, { Component } from 'react';\nimport Navbar from 'react-bootstrap/Navbar'\n\n// import logo from './logo.svg';\nimport './App.css';\n\nclass TopNavBar extends Component {\n  render() {\n    return (\n      <React.Fragment>\n        <Navbar bg=\"dark\" variant=\"dark\">\n          <Navbar.Brand>Pollunator</Navbar.Brand>\n        </Navbar>\n      </React.Fragment>\n    )\n  }\n}\n\nexport default TopNavBar;\n","import React, { Component } from 'react';\nimport StationsContainer from './Stations'\nimport TopNavBar from './TopNavBar'\n\n// import logo from './logo.svg';\nimport './App.css';\n\nclass App extends Component {\n  render() {\n    return (\n      <React.Fragment>\n        <TopNavBar />\n        <StationsContainer />\n      </React.Fragment>\n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n              \r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.register();"],"sourceRoot":""}