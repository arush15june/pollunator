{"version":3,"sources":["StationList.js","API.js","Helpers.js","Subscriber.js","Parameter.js","Station.js","MinHeap.js","Stations.js","TopNavBar.js","App.js","serviceWorker.js","index.js"],"names":["StationList","this","props","stationList","map","station","react_default","a","createElement","value","station_id","station_name","station_options","stationsRenderList","Fragment","Form_default","onChange","selectHandler","Group","controlId","Label","Control","as","Component","URL","STATIONS_URL","concat","PUBLIC_KEY_URL","SUBSCRIBE_URL","urlBase64ToUint8Array","base64String","base64","repeat","length","replace","rawData","window","atob","Uint8Array","from","Object","toConsumableArray","char","charCodeAt","getPublicKeyArray","_callee","response","key","regenerator_default","wrap","_context","prev","next","fetch","sent","text","abrupt","stop","Subscriber","_this","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","onSubmitHandler","_ref","asyncToGenerator","mark","event","email","preventDefault","target","setState","subscribe","_x","apply","arguments","state","clicked","permission","subscripton","subscriptionResponse","subscription","subscribe_body","notify_time","method","headers","Content-Type","body","JSON","stringify","susbcribe_request","subscribe_json","json","Notification","requestPermission","permissionResult","registration","_ask_permission","public_key","options","userVisibleOnly","applicationServerKey","pushManager","_push_subscription","susbcription_response","navigator","serviceWorker","ready","_subscribe","onSubmit","name","type","placeholder","Button_default","variant","Parameter","param","parameterData","Card_default","style","width","Body","Title","Text","date","Station","stationData","parameters","src_Parameter","obj","station_data","keys","Header","status","latitude","longitude","CardColumns_default","_parameter_list","src_Subscriber","MinHeap","capacity","getValueMethod","heapSize","heap","Array","fill","getValue","Error","siftUp","i","j","index","minIndex","n","lc","rc","swap","siftDown","parent","Math","ceil","result","StationsContainer","selectChangeHandler","selectedStation","fetchStationData","stationDistanceList","coords","API_URL","station_data_request","station_data_json","station_el","filter","st","undefined","geolocation","setCoordState","_callee3","pos","_context3","_this2","setStationOnEuclideanDistance","getCurrentPosition","x1","y1","x2","y2","sqrt","pow","lat","long","mh","distance","station_lat","station_long","euclideanDistance","insert","setSelectedStationFromIndex","stationsRequest","stationsData","selectedStationData","setSelectedStationFromStation","fetchStations","setUserCoordinates","Container_default","Row_default","Col_default","src_StationList","src_Station","TopNavBar","Navbar_default","bg","Brand","App","src_TopNavBar","Stations","isLocalhost","Boolean","location","hostname","match","registerValidSW","swUrl","config","register","then","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","src_App_0","document","getElementById","process","href","origin","addEventListener","contentType","get","indexOf","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.349525ff.chunk.js","sourcesContent":["import React, { Component } from 'react'\nimport Form from 'react-bootstrap/Form'\n\nclass StationList extends Component {\n\n  stationsRenderList() {\n    let station_list = this.props.stationList   \n    let render_list = station_list.map( station => {\n      return <option value={station.station_id}>{station.station_name}</option>\n    })\n    return render_list\n  }\n\n  render() {\n    let station_options = this.stationsRenderList()\n    return (\n      <React.Fragment>\n        <Form onChange={this.props.selectHandler}>\n          <Form.Group controlId='formStationsList'>\n            <Form.Label>Stations</Form.Label>\n            <Form.Control controlId=\"station\" as='select'>\n              {station_options}\n            </Form.Control>\n          </Form.Group>\n        </Form>\n      </React.Fragment>\n    )\n  }\n}\n\nexport default StationList","const URL = 'http://localhost:5000'\nconst STATIONS_URI = '/api/stations'\nconst PUBLIC_KEY_URI = '/api/publickey'\nconst SUBSCRIBE_URI = '/api/subscribe'\n\nconst STATIONS_URL = `${URL}${STATIONS_URI}`\nconst PUBLIC_KEY_URL = `${URL}${PUBLIC_KEY_URI}`\nconst SUBSCRIBE_URL = `${URL}${SUBSCRIBE_URI}`\n\nexport default URL;\nexport { STATIONS_URL, PUBLIC_KEY_URL, SUBSCRIBE_URL }\n","import { PUBLIC_KEY_URL } from './API.js'\n\nfunction urlBase64ToUint8Array(base64String) {\n    const padding = '='.repeat((4 - base64String.length % 4) % 4);\n    const base64 = (base64String + padding)\n        .replace(/\\-/g, '+')\n        .replace(/_/g, '/')\n    ;\n    const rawData = window.atob(base64);\n    return Uint8Array.from([...rawData].map((char) => char.charCodeAt(0)));\n}\n\nasync function getPublicKeyArray() {\n    const response = await fetch(PUBLIC_KEY_URL)\n    const key = await response.text()\n\n    return await urlBase64ToUint8Array(key)\n}\n\nexport { urlBase64ToUint8Array, getPublicKeyArray }","import React, { Component } from 'react'\nimport Form from 'react-bootstrap/Form'\nimport Button from 'react-bootstrap/Button'\n\nimport { getPublicKeyArray } from './Helpers'\nimport { SUBSCRIBE_URL } from './API'\n\nclass Subscriber extends Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      email: '',\n      clicked: false,\n      permission: false,\n      subscripton: {},\n      subscriptionResponse: {},\n    }\n  }\n\n  async _push_subscription(subscription) {\n    const email = this.state.email\n    const station_id = this.props.station_id;\n    const notify_time = '09:00'\n\n    const subscribe_body = {\n      station_id: station_id,\n      notify_time: notify_time,\n      email: email,\n      subscription: subscription\n    }\n    \n    const susbcribe_request = await fetch(SUBSCRIBE_URL, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(subscribe_body)\n    })\n\n    const subscribe_json = susbcribe_request.json()\n\n    return subscribe_json\n  }\n  \n  async _ask_permission() {\n    const permissionResult = await Notification.requestPermission()\n    return permissionResult\n  }\n\n  async _subscribe(registration) {\n    const permissionResult = await this._ask_permission()\n    \n    if (permissionResult === 'granted') {\n      this.setState({\n        permission: true\n      })\n\n      const public_key = await getPublicKeyArray()\n\n      const options = {\n        userVisibleOnly: true,\n        applicationServerKey: public_key\n      }\n\n      const subscription = await registration.pushManager.subscribe(options)\n      this.setState({\n        subscription: subscription\n      })\n\n      let susbcription_response = await this._push_subscription(subscription)\n      this.setState({\n        subscriptionResponse: susbcription_response\n      })\n    }\n  }\n  \n  async subscribe() {\n    if ('serviceWorker' in navigator) {\n      const registration = await navigator.serviceWorker.ready\n      this._subscribe(registration)\n    }\n  }\n  \n  onSubmitHandler = async (event) => {\n    event.preventDefault()\n    const email = event.target.email.value\n    this.setState({\n      email: email\n    })\n    await this.subscribe()\n  }\n\n  render() {\n    return (\n      <React.Fragment>\n        <Form onSubmit={this.onSubmitHandler}>\n          <Form.Group controlId=\"formEmail\">\n            <Form.Control name='email' type=\"email\" placeholder=\"Enter email\" />\n          </Form.Group>\n          <Button variant=\"primary\" type=\"submit\">\n            Get Notified Daily!\n          </Button>\n        </Form>\n      </React.Fragment>\n    )\n  }\n}\n\nexport default Subscriber;","import React, { Component } from 'react'\nimport Card from 'react-bootstrap/Card'\n\nclass Parameter extends Component {\n  render() {\n    const param = this.props.parameterData\n    \n    return (\n      <React.Fragment>\n        <Card style={{ width: '18rem' }}>\n          <Card.Body>\n            <Card.Title>{param.name} | {param.value}</Card.Title>\n            <Card.Text>\n              \n            </Card.Text>\n            <Card.Text>\n              {param.date}\n            </Card.Text>\n          </Card.Body>\n        </Card>                                                     \n      </React.Fragment>\n    )\n  }\n}\n\nexport default Parameter","import React, { Component } from 'react';\nimport Card from 'react-bootstrap/Card'\nimport CardColumns from 'react-bootstrap/CardColumns'\n\nimport Subscriber from './Subscriber'\nimport Parameter from './Parameter'\n\nfunction isEmpty(obj) {\n  return Object.keys(obj).length === 0;\n}\n\nclass Station extends Component { \n  \n    _parameter_list() {\n      const parameters = this.props.stationData.parameters.parameters\n      const param_list = parameters.map(param => {\n        return <Parameter parameterData={param} />\n      })\n\n      return param_list      \n    }\n  \n    render() {\n      let station_data = this.props.stationData\n\n      return (\n        <React.Fragment>\n          { !isEmpty(station_data) ? (                         \n            <Card>\n              <Card.Header>{station_data.station_name}</Card.Header>\n              <Card.Body>\n                <Card.Title>{station_data.status}</Card.Title>\n                <Card.Text>\n                  Latitude: {station_data.latitude} Longitude: {station_data.longitude} Timestamp: {station_data.parameters.date}\n                </Card.Text>\n                <CardColumns>\n                  {this._parameter_list()}\n                </CardColumns>\n                <Card.Text>\n                  <Subscriber station_id={this.props.stationData.station_id} />\n                </Card.Text>\n                {/* <Button variant=\"primary\">Go somewhere</Button> */}\n              </Card.Body>\n            </Card>\n            ) : (\n              <React.Fragment></React.Fragment>\n            )\n          }\n        </React.Fragment>\n      )\n    }\n}\n\nexport default Station;","class MinHeap {\n    constructor(capacity, getValueMethod){\n        this.heapSize = -1;\n        this.heap = Array(capacity).fill(-1)\n        this.getValue = getValueMethod\n    }\n    \n    insert(value){\n        if(this.heapSize+1 === this.heap.length){\n            throw Error(\"Overflow Size\")\n        }\n        this.heap[this.heapSize + 1] = value\n        this.heapSize = this.heapSize + 1\n        this.siftUp(this.heapSize);\n    }\n    \n    swap(i,j){\n        [this.heap[i],this.heap[j]] = [this.heap[j],this.heap[i]]\n    }\n    \n    siftDown(index){\n        let minIndex = index\n        let n = this.heap.length\n        let lc = 2*index + 1\n        if(lc<=n-1 && this.getValue(this.heap[lc]) < this.getValue(this.heap[minIndex]) ) minIndex=lc\n        let rc = 2*index + 2\n        if(rc<=n-1 && this.getValue(this.heap[lc]) < this.getValue(this.heap[minIndex]) ) minIndex=rc\n\n        if(minIndex !== index){\n            this.swap(index,minIndex)\n            this.siftDown(minIndex)\n        }\n    }\n    \n    siftUp(index){\n        let parent  = Math.ceil((index-1)/2)\n        while(index>0 && this.getValue(this.heap[parent]) > this.getValue(this.heap[index]) ){\n            this.swap(index,parent)\n            index = parent\n            parent = Math.ceil((index-1)/2)\n        }\n    }\n\n    extractMin(){\n        let result  = this.heap[0]\n        this.heap[0] = this.heap[this.heapSize]\n        this.heapSize = this.heapSize - 1\n        this.siftDown(0)\n        return result\n    }\n\n}\n\nexport default MinHeap","import React, { Component } from 'react';\nimport Container from 'react-bootstrap/Container'\nimport Row from 'react-bootstrap/Row'\nimport Col from 'react-bootstrap/Col'\n\nimport StationList from './StationList'\nimport Station from './Station'\n\nimport MinHeap from './MinHeap'\n\nimport { STATIONS_URL } from './API'\n\nclass StationsContainer extends Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      stationList: [],\n      stationDistanceList: [],\n      coords: {},\n      selectedStation: {}\n    }\n  }\n\n  async fetchStationData(station_id) {\n    let API_URL = `${STATIONS_URL}/${station_id}`\n    let station_data_request = await fetch(API_URL);\n    let station_data_json = await station_data_request.json()\n\n    return station_data_json\n  }\n\n  getStationFromStationId(station_id) {\n    let station_el = this.state.stationList.filter( st =>\n      st.station_id === station_id\n    )[0]\n\n    if (station_el === undefined) return {}\n\n    return station_el\n  }\n\n  async setUserCoordinates() {\n    const geolocation = navigator.geolocation\n\n    let setCoordState = async (pos) => {\n      this.setState({\n        coords: pos\n      })\n      this.setStationOnEuclideanDistance()\n    }\n\n    if (geolocation) {\n      await geolocation.getCurrentPosition(setCoordState)\n    }\n  }\n\n  selectChangeHandler = async (event) => {\n    this.setState({\n      selectedStation: {}\n    })\n\n    let station_id = event.target.value\n    let station_data = await this.fetchStationData(station_id)\n\n    this.setState({\n      selectedStation: station_data\n    })\n  }\n\n  euclideanDistance(x1, y1, x2, y2) {\n    return Math.sqrt(Math.pow(x1 - x2, 2) + Math.pow(y1 - y2, 2))\n  }\n\n  async setStationOnEuclideanDistance() {\n    if (this.state.coords.length !== 0 && this.state.stationList.length !== 0) {\n      let lat = this.state.coords.coords.latitude\n      let long = this.state.coords.coords.longitude\n\n      let mh = new MinHeap(this.state.stationList.length, (station) => {\n        return station.distance\n      })\n\n  for (let i = 0; i < this.state.stationList.length; i++) {\n    let station = this.state.stationList[i]\n    let station_lat = station.latitude\n    let station_long = station.longitude\n    let distance = this.euclideanDistance(lat, long, station_lat, station_long)\n\n    station.distance = distance\n    mh.insert(station)\n  }\n\n  mh.heap[0].station_name += ' [Nearest Geolocated Station]'\n\n  this.setState({\n    selectedStation: {},\n    stationList: mh.heap\n  })\n\n  await this.setSelectedStationFromIndex(0)\n}\n}\n\nasync fetchStations() {\nlet stationsRequest = await fetch(STATIONS_URL)\nlet stationsData = await stationsRequest.json()\n\nthis.setState({\n    stationList: stationsData\n  }\n)\n}\n\nasync setSelectedStationFromStation(station) {\n  let selectedStationData = await this.fetchStationData(station.station_id)\n\n  this.setState({\n    selectedStation: selectedStationData\n  })\n}\n\nasync setSelectedStationFromIndex(index) {\n  let station = this.state.stationList[index]\n  await this.setSelectedStationFromStation(station)\n}\n\nasync componentDidMount() {\n  await this.fetchStations()\n  await this.setUserCoordinates()\n  await this.setSelectedStationFromIndex(0)\n}\n\nrender() {\nreturn (\n  <React.Fragment>\n    <Container>\n      <Row>\n        <Col>\n          <StationList stationList={this.state.stationList} selectHandler={this.selectChangeHandler}/>\n        </Col>\n        </Row>\n        <Row>\n          <Col>\n            <Station stationData={this.state.selectedStation} />\n          </Col>\n        </Row>\n        </Container>\n      </React.Fragment>\n    )\n  }\n}\n\nexport default StationsContainer;\n","import React, { Component } from 'react';\nimport Navbar from 'react-bootstrap/Navbar'\n\n// import logo from './logo.svg';\nimport './App.css';\n\nclass TopNavBar extends Component {\n  render() {\n    return (\n      <React.Fragment>\n        <Navbar bg=\"dark\" variant=\"dark\">\n          <Navbar.Brand>Pollunator</Navbar.Brand>\n        </Navbar>\n      </React.Fragment>\n    )\n  }\n}\n\nexport default TopNavBar;\n","import React, { Component } from 'react';\nimport StationsContainer from './Stations'\nimport TopNavBar from './TopNavBar'\n\n// import logo from './logo.svg';\nimport './App.css';\n\nclass App extends Component {\n  render() {\n    return (\n      <React.Fragment>\n        <TopNavBar />\n        <StationsContainer />\n      </React.Fragment>\n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n              \n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();"],"sourceRoot":""}