{"version":3,"sources":["StationList.js","Station.js","MinHeap.js","API.js","Stations.js","TopNavBar.js","App.js","serviceWorker.js","index.js"],"names":["StationList","this","props","stationList","map","station","react_default","a","createElement","value","station_id","station_name","station_options","stationsRenderList","Fragment","Form_default","onChange","selectHandler","Group","controlId","Label","Control","as","Component","Station","stationData","parameters","param","name","className","date","obj","station_data","Object","keys","length","Card_default","Header","Body","Title","status","Text","latitude","longitude","parameterList","MinHeap","capacity","getValueMethod","classCallCheck","heapSize","heap","Array","fill","getValue","siftUp","i","j","_ref","index","minIndex","n","lc","rc","swap","siftDown","parent","Math","ceil","result","STATIONS_URL","concat","StationsContainer","_this","possibleConstructorReturn","getPrototypeOf","call","selectChangeHandler","asyncToGenerator","regenerator_default","mark","_callee","event","wrap","_context","prev","next","setState","selectedStation","target","fetchStationData","sent","stop","_x","apply","arguments","state","stationDistanceList","coords","API_URL","fetch","station_data_request","json","station_data_json","station_el","filter","st","undefined","geolocation","navigator","setCoordState","pos","_this2","setStationOnEuclideanDistance","getCurrentPosition","x1","y1","x2","y2","sqrt","pow","lat","long","mh","distance","station_lat","station_long","euclideanDistance","insert","setSelectedStationFromStation","stationsRequest","stationsData","selectedStationData","console","log","fetchStations","setSelectedStationFromIndex","setUserCoordinates","Container_default","Row_default","Col_default","src_StationList","src_Station","TopNavBar","Navbar_default","bg","variant","Brand","App","src_TopNavBar","Stations","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","catch","error","ReactDOM","render","src_App_0","document","getElementById","URL","process","href","origin","addEventListener","response","contentType","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"6VA8BeA,+LApBX,OAJmBC,KAAKC,MAAMC,YACCC,IAAK,SAAAC,GAClC,OAAOC,EAAAC,EAAAC,cAAA,UAAQC,MAAOJ,EAAQK,YAAaL,EAAQM,iDAMrD,IAAIC,EAAkBX,KAAKY,qBAC3B,OACEP,EAAAC,EAAAC,cAACF,EAAAC,EAAMO,SAAP,KACER,EAAAC,EAAAC,cAACO,EAAAR,EAAD,CAAMS,SAAUf,KAAKC,MAAMe,eACzBX,EAAAC,EAAAC,cAACO,EAAAR,EAAKW,MAAN,CAAYC,UAAU,oBACpBb,EAAAC,EAAAC,cAACO,EAAAR,EAAKa,MAAN,iBACAd,EAAAC,EAAAC,cAACO,EAAAR,EAAKc,QAAN,CAAcF,UAAU,UAAUG,GAAG,UAClCV,aAlBWW,kCC4CXC,0LA/BT,OALmBvB,KAAKC,MAAMuB,YAAYC,WAAWA,WACvBtB,IAAI,SAAAuB,GAChC,OAAOrB,EAAAC,EAAAC,cAAA,SAAImB,EAAMC,KAAV,KAAiBtB,EAAAC,EAAAC,cAAA,QAAMqB,UAAU,oBAAoBF,EAAMlB,OAA3D,IAA0EkB,EAAMG,yCAOzF,IAhBWC,EAgBPC,EAAe/B,KAAKC,MAAMuB,YAE9B,OACEnB,EAAAC,EAAAC,cAACF,EAAAC,EAAMO,SAAP,MAnBSiB,EAoBIC,EAnBgB,IAA5BC,OAAOC,KAAKH,GAAKI,OAoBd7B,EAAAC,EAAAC,cAAC4B,EAAA7B,EAAD,KACED,EAAAC,EAAAC,cAAC4B,EAAA7B,EAAK8B,OAAN,KAAcL,EAAarB,cAC3BL,EAAAC,EAAAC,cAAC4B,EAAA7B,EAAK+B,KAAN,KACEhC,EAAAC,EAAAC,cAAC4B,EAAA7B,EAAKgC,MAAN,KAAaP,EAAaQ,QAC1BlC,EAAAC,EAAAC,cAAC4B,EAAA7B,EAAKkC,KAAN,kBACaT,EAAaU,SAD1B,eACgDV,EAAaW,UAD7D,eACoFX,EAAaN,WAAWI,MAE5GxB,EAAAC,EAAAC,cAAC4B,EAAA7B,EAAKkC,KAAN,KACGxC,KAAK2C,mBAMVtC,EAAAC,EAAAC,cAACF,EAAAC,EAAMO,SAAP,eA/BQS,aC6CPsB,aApDX,SAAAA,EAAYC,EAAUC,GAAgBd,OAAAe,EAAA,EAAAf,CAAAhC,KAAA4C,GAClC5C,KAAKgD,UAAY,EACjBhD,KAAKiD,KAAOC,MAAML,GAAUM,MAAM,GAClCnD,KAAKoD,SAAWN,qDAGbtC,GACH,GAAGR,KAAKgD,SAAS,IAAMhD,KAAKiD,KAAKf,OAC7B,KAAM,gBAEVlC,KAAKiD,KAAKjD,KAAKgD,SAAW,GAAKxC,EAC/BR,KAAKgD,SAAWhD,KAAKgD,SAAW,EAChChD,KAAKqD,OAAOrD,KAAKgD,uCAGhBM,EAAEC,GAAE,IAAAC,EACyB,CAACxD,KAAKiD,KAAKM,GAAGvD,KAAKiD,KAAKK,IAArDtD,KAAKiD,KAAKK,GADNE,EAAA,GACSxD,KAAKiD,KAAKM,GADnBC,EAAA,oCAIAC,GACL,IAAIC,EAAWD,EACXE,EAAI3D,KAAKiD,KAAKf,OACd0B,EAAK,EAAEH,EAAQ,EAChBG,GAAID,EAAE,GAAK3D,KAAKoD,SAASpD,KAAKiD,KAAKW,IAAO5D,KAAKoD,SAASpD,KAAKiD,KAAKS,MAAaA,EAASE,GAC3F,IAAIC,EAAK,EAAEJ,EAAQ,EAChBI,GAAIF,EAAE,GAAK3D,KAAKoD,SAASpD,KAAKiD,KAAKW,IAAO5D,KAAKoD,SAASpD,KAAKiD,KAAKS,MAAaA,EAASG,GAExFH,GAAYD,IACXzD,KAAK8D,KAAKL,EAAMC,GAChB1D,KAAK+D,SAASL,mCAIfD,GAEH,IADA,IAAIO,EAAUC,KAAKC,MAAMT,EAAM,GAAG,GAC5BA,EAAM,GAAKzD,KAAKoD,SAASpD,KAAKiD,KAAKe,IAAWhE,KAAKoD,SAASpD,KAAKiD,KAAKQ,KACxEzD,KAAK8D,KAAKL,EAAMO,GAChBP,EAAQO,EACRA,EAASC,KAAKC,MAAMT,EAAM,GAAG,wCAKjC,IAAIU,EAAUnE,KAAKiD,KAAK,GAIxB,OAHAjD,KAAKiD,KAAK,GAAKjD,KAAKiD,KAAKjD,KAAKgD,UAC9BhD,KAAKgD,SAAWhD,KAAKgD,SAAW,EAChChD,KAAK+D,SAAS,GACPI,WC7CTC,EAAY,GAAAC,OAHN,IAGMA,OAFG,iBC0JNC,cA9Ib,SAAAA,EAAYrE,GAAO,IAAAsE,EAAA,OAAAvC,OAAAe,EAAA,EAAAf,CAAAhC,KAAAsE,IACjBC,EAAAvC,OAAAwC,EAAA,EAAAxC,CAAAhC,KAAAgC,OAAAyC,EAAA,EAAAzC,CAAAsC,GAAAI,KAAA1E,KAAMC,KA0CR0E,oBA3CmB,eAAAnB,EAAAxB,OAAA4C,EAAA,EAAA5C,CAAA6C,EAAAvE,EAAAwE,KA2CG,SAAAC,EAAOC,GAAP,IAAAvE,EAAAsB,EAAA,OAAA8C,EAAAvE,EAAA2E,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cACpBb,EAAKc,SAAS,CACZC,gBAAiB,KAGf7E,EAAauE,EAAMO,OAAO/E,MALV0E,EAAAE,KAAA,EAMKb,EAAKiB,iBAAiB/E,GAN3B,OAMhBsB,EANgBmD,EAAAO,KAQpBlB,EAAKc,SAAS,CACZC,gBAAiBvD,IATC,wBAAAmD,EAAAQ,SAAAX,MA3CH,gBAAAY,GAAA,OAAAnC,EAAAoC,MAAA5F,KAAA6F,YAAA,GAEjBtB,EAAKuB,MAAQ,CACX5F,YAAa,GACb6F,oBAAqB,GACrBC,OAAQ,GACRV,gBAAiB,IANFf,wHAUI9D,oFACjBwF,YAAa7B,cAAgB3D,YACAyF,MAAMD,iBAAnCE,kBAC0BA,EAAqBC,qBAA/CC,2BAEGA,iJAGe5F,GACtB,IAAI6F,EAAatG,KAAK8F,MAAM5F,YAAYqG,OAAQ,SAAAC,GAAE,OAChDA,EAAG/F,aAAeA,IAClB,GAEF,YAAmBgG,IAAfH,EAAiC,GAE9BA,yKAIDI,EAAcC,UAAUD,YAE1BE,EAAgB,SAACC,GACnBC,EAAKzB,SAAS,CACZW,OAAQa,IAEVC,EAAKC,kCAGHL,kCACIA,EAAYM,mBAAmBJ,0IAiBvBK,EAAIC,EAAIC,EAAIC,GAC5B,OAAOnD,KAAKoD,KAAKpD,KAAKqD,IAAIL,EAAKE,EAAI,GAAKlD,KAAKqD,IAAIJ,EAAKE,EAAI,2LAIzB,IAA7BpH,KAAK8F,MAAME,OAAO9D,QAAkD,IAAlClC,KAAK8F,MAAM5F,YAAYgC,wBAQ3D,IAPIqF,EAAMvH,KAAK8F,MAAME,OAAOA,OAAOvD,SAC/B+E,EAAOxH,KAAK8F,MAAME,OAAOA,OAAOtD,UAEhC+E,EAAK,IAAI7E,EAAQ5C,KAAK8F,MAAM5F,YAAYgC,OAAQ,SAAC9B,GACnD,OAAOA,EAAQsH,WAGRpE,EAAI,EAAGA,EAAItD,KAAK8F,MAAM5F,YAAYgC,OAAQoB,IAC7ClD,EAAUJ,KAAK8F,MAAM5F,YAAYoD,GACjCqE,EAAcvH,EAAQqC,SACtBmF,EAAexH,EAAQsC,UACvBgF,EAAW1H,KAAK6H,kBAAkBN,EAAKC,EAAMG,EAAaC,GAE9DxH,EAAQsH,SAAWA,EACnBD,EAAGK,OAAO1H,UAGZqH,EAAGxE,KAAK,GAAGvC,cAAgB,gCAE3BV,KAAKqF,SAAS,CACZC,gBAAiB,cAEbtF,KAAK+H,8BAA8BN,EAAGxE,KAAK,WAEjDjD,KAAKqF,SAAS,CACZnF,YAAauH,EAAGxE,kRAMQiD,MAAM9B,iBAA9B4D,kBACqBA,EAAgB5B,cAArC6B,SAEJjI,KAAKqF,SAAS,CACVnF,YAAa+H,oMAKiB7H,yFACFJ,KAAKwF,iBAAiBpF,EAAQK,mBAA1DyH,SAEJC,QAAQC,IAAIF,GACZlI,KAAKqF,SAAS,CACZC,gBAAiB4C,mMAIazE,gFAC5BrD,EAAUJ,KAAK8F,MAAM5F,YAAYuD,YAC/BzD,KAAK+H,8BAA8B3H,0QAInCJ,KAAKqI,uCACLrI,KAAKsI,4BAA4B,UACvCtI,KAAKuI,wJAIL,OACElI,EAAAC,EAAAC,cAACF,EAAAC,EAAMO,SAAP,KACER,EAAAC,EAAAC,cAACiI,EAAAlI,EAAD,KACED,EAAAC,EAAAC,cAACkI,EAAAnI,EAAD,KACED,EAAAC,EAAAC,cAACmI,EAAApI,EAAD,KACED,EAAAC,EAAAC,cAACoI,EAAD,CAAazI,YAAaF,KAAK8F,MAAM5F,YAAac,cAAehB,KAAK2E,wBAG1EtE,EAAAC,EAAAC,cAACkI,EAAAnI,EAAD,KACED,EAAAC,EAAAC,cAACmI,EAAApI,EAAD,KACED,EAAAC,EAAAC,cAACqI,EAAD,CAASpH,YAAaxB,KAAK8F,MAAMR,6BAtIfhE,8BCMjBuH,0LAVX,OACExI,EAAAC,EAAAC,cAACF,EAAAC,EAAMO,SAAP,KACER,EAAAC,EAAAC,cAACuI,EAAAxI,EAAD,CAAQyI,GAAG,OAAOC,QAAQ,QACxB3I,EAAAC,EAAAC,cAACuI,EAAAxI,EAAO2I,MAAR,4BALc3H,cCYT4H,mLATX,OACE7I,EAAAC,EAAAC,cAACF,EAAAC,EAAMO,SAAP,KACER,EAAAC,EAAAC,cAAC4I,EAAD,MACA9I,EAAAC,EAAAC,cAAC6I,EAAD,cALU9H,mBCME,GAAA+C,OADJ,iBACI,cA4CpB,IAAMgF,EAAcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DAsCN,SAASC,EAAgBC,EAAOC,GAC9BlD,UAAUmD,cACPC,SAASH,GACTI,KAAK,SAAAC,GACJA,EAAaC,cAAgB,WAC3B,IAAMC,EAAmBF,EAAaG,WACd,MAApBD,IAGJA,EAAiBE,cAAgB,WACA,cAA3BF,EAAiBrE,QACfa,UAAUmD,cAAcQ,YAI1BnC,QAAQC,IACN,iHAKEyB,GAAUA,EAAOU,UACnBV,EAAOU,SAASN,KAMlB9B,QAAQC,IAAI,sCAGRyB,GAAUA,EAAOW,WACnBX,EAAOW,UAAUP,UAO5BQ,MAAM,SAAAC,GACLvC,QAAQuC,MAAM,4CAA6CA,KCvIjEC,IAASC,OAAOvK,EAAAC,EAAAC,cAACsK,EAAD,MAASC,SAASC,eAAe,SD6D1C,SAAkBlB,GACvB,GAA6C,kBAAmBlD,UAAW,CAGzE,GADkB,IAAIqE,IAAIC,GAAwB1B,OAAOC,SAAS0B,MACpDC,SAAW5B,OAAOC,SAAS2B,OAIvC,OAGF5B,OAAO6B,iBAAiB,OAAQ,WAC9B,IAAMxB,EAAK,GAAAvF,OAAM4G,GAAN,sBAEP5B,GAgEV,SAAiCO,EAAOC,GAEtC3D,MAAM0D,GACHI,KAAK,SAAAqB,GAEJ,IAAMC,EAAcD,EAASE,QAAQC,IAAI,gBAEnB,MAApBH,EAAS9I,QACO,MAAf+I,IAA8D,IAAvCA,EAAYG,QAAQ,cAG5C9E,UAAUmD,cAAc4B,MAAM1B,KAAK,SAAAC,GACjCA,EAAa0B,aAAa3B,KAAK,WAC7BT,OAAOC,SAASoC,aAKpBjC,EAAgBC,EAAOC,KAG1BY,MAAM,WACLtC,QAAQC,IACN,mEArFAyD,CAAwBjC,EAAOC,GAI/BlD,UAAUmD,cAAc4B,MAAM1B,KAAK,WACjC7B,QAAQC,IACN,gHAMJuB,EAAgBC,EAAOC,MCpF/BC","file":"static/js/main.8e2d33c3.chunk.js","sourcesContent":["import React, { Component } from 'react'\r\nimport Form from 'react-bootstrap/Form'\r\n\r\nclass StationList extends Component {\r\n\r\n  stationsRenderList() {\r\n    let station_list = this.props.stationList   \r\n    let render_list = station_list.map( station => {\r\n      return <option value={station.station_id}>{station.station_name}</option>\r\n    })\r\n    return render_list\r\n  }\r\n\r\n  render() {\r\n    let station_options = this.stationsRenderList()\r\n    return (\r\n      <React.Fragment>\r\n        <Form onChange={this.props.selectHandler}>\r\n          <Form.Group controlId='formStationsList'>\r\n            <Form.Label>Stations</Form.Label>\r\n            <Form.Control controlId=\"station\" as='select'>\r\n              {station_options}\r\n            </Form.Control>\r\n          </Form.Group>\r\n        </Form>\r\n      </React.Fragment>\r\n    )\r\n  }\r\n}\r\n\r\nexport default StationList","import React, { Component } from 'react';\r\nimport Card from 'react-bootstrap/Card'\r\nimport Button from 'react-bootstrap/Button'\r\n\r\nfunction isEmpty(obj) {\r\n  return Object.keys(obj).length === 0;\r\n}\r\n\r\nclass Station extends Component { \r\n  \r\n    parameterList() {\r\n      const parameters = this.props.stationData.parameters.parameters\r\n      const param_list = parameters.map(param => {\r\n        return <p>{param.name}: <span className='font-weight-bold'>{param.value}</span> {param.date}</p>\r\n      })\r\n\r\n      return param_list      \r\n    }\r\n  \r\n    render() {\r\n      let station_data = this.props.stationData\r\n\r\n      return (\r\n        <React.Fragment>\r\n          { !isEmpty(station_data) ? (                         \r\n            <Card>\r\n              <Card.Header>{station_data.station_name}</Card.Header>\r\n              <Card.Body>\r\n                <Card.Title>{station_data.status}</Card.Title>\r\n                <Card.Text>\r\n                  Latitude: {station_data.latitude} Longitude: {station_data.longitude} Timestamp: {station_data.parameters.date}\r\n                </Card.Text>\r\n                <Card.Text>\r\n                  {this.parameterList()}\r\n                </Card.Text>\r\n                {/* <Button variant=\"primary\">Go somewhere</Button> */}\r\n              </Card.Body>\r\n            </Card>\r\n            ) : (\r\n              <React.Fragment></React.Fragment>\r\n            )\r\n          }\r\n        </React.Fragment>\r\n      )\r\n    }\r\n}\r\n\r\nexport default Station;","class MinHeap {\r\n    constructor(capacity, getValueMethod){\r\n        this.heapSize = -1;\r\n        this.heap = Array(capacity).fill(-1)\r\n        this.getValue = getValueMethod\r\n    }\r\n    \r\n    insert(value){\r\n        if(this.heapSize+1 === this.heap.length){\r\n            throw \"Overflow Size\"\r\n        }\r\n        this.heap[this.heapSize + 1] = value\r\n        this.heapSize = this.heapSize + 1\r\n        this.siftUp(this.heapSize);\r\n    }\r\n    \r\n    swap(i,j){\r\n        [this.heap[i],this.heap[j]] = [this.heap[j],this.heap[i]]\r\n    }\r\n    \r\n    siftDown(index){\r\n        let minIndex = index\r\n        let n = this.heap.length\r\n        let lc = 2*index + 1\r\n        if(lc<=n-1 && this.getValue(this.heap[lc]) < this.getValue(this.heap[minIndex]) ) minIndex=lc\r\n        let rc = 2*index + 2\r\n        if(rc<=n-1 && this.getValue(this.heap[lc]) < this.getValue(this.heap[minIndex]) ) minIndex=rc\r\n\r\n        if(minIndex != index){\r\n            this.swap(index,minIndex)\r\n            this.siftDown(minIndex)\r\n        }\r\n    }\r\n    \r\n    siftUp(index){\r\n        let parent  = Math.ceil((index-1)/2)\r\n        while(index>0 && this.getValue(this.heap[parent]) > this.getValue(this.heap[index]) ){\r\n            this.swap(index,parent)\r\n            index = parent\r\n            parent = Math.ceil((index-1)/2)\r\n        }\r\n    }\r\n\r\n    extractMin(){\r\n        let result  = this.heap[0]\r\n        this.heap[0] = this.heap[this.heapSize]\r\n        this.heapSize = this.heapSize - 1\r\n        this.siftDown(0)\r\n        return result\r\n    }\r\n\r\n}\r\n\r\nexport default MinHeap","const URL = ''\r\nconst STATIONS_URI = '/api/stations'\r\n\r\nconst STATIONS_URL = `${URL}${STATIONS_URI}`\r\n\r\nexport default URL;\r\nexport { STATIONS_URI, STATIONS_URL }","import React, { Component } from 'react';\r\nimport Container from 'react-bootstrap/Container'\r\nimport Row from 'react-bootstrap/Row'\r\nimport Col from 'react-bootstrap/Col'\r\n\r\nimport StationList from './StationList'\r\nimport Station from './Station'\r\n\r\nimport MinHeap from './MinHeap'\r\n\r\nimport { STATIONS_URL } from './API'\r\n\r\nclass StationsContainer extends Component {\r\n  constructor(props) {\r\n    super(props)\r\n    this.state = {\r\n      stationList: [],\r\n      stationDistanceList: [],\r\n      coords: {},\r\n      selectedStation: {}\r\n    }\r\n  }\r\n\r\n  async fetchStationData(station_id) {\r\n    let API_URL = `${STATIONS_URL}/${station_id}`\r\n    let station_data_request = await fetch(API_URL);\r\n    let station_data_json = await station_data_request.json()\r\n\r\n    return station_data_json\r\n  }\r\n\r\n  getStationFromStationId(station_id) {\r\n    let station_el = this.state.stationList.filter( st => \r\n      st.station_id === station_id \r\n    )[0]\r\n\r\n    if (station_el === undefined) return {}\r\n\r\n    return station_el\r\n  }\r\n  \r\n  async setUserCoordinates() {\r\n    const geolocation = navigator.geolocation\r\n    \r\n    let setCoordState = (pos) => {\r\n      this.setState({\r\n        coords: pos\r\n      })\r\n      this.setStationOnEuclideanDistance()\r\n    }\r\n    \r\n    if (geolocation) { \r\n      await geolocation.getCurrentPosition(setCoordState)\r\n    }\r\n  }\r\n\r\n  selectChangeHandler = async (event) => {\r\n    this.setState({\r\n      selectedStation: {}\r\n    })\r\n    \r\n    let station_id = event.target.value\r\n    let station_data = await this.fetchStationData(station_id)\r\n\r\n    this.setState({\r\n      selectedStation: station_data\r\n    })\r\n  }\r\n  \r\n  euclideanDistance(x1, y1, x2, y2) {\r\n    return Math.sqrt(Math.pow(x1 - x2, 2) + Math.pow(y1 - y2, 2))\r\n  }\r\n  \r\n  async setStationOnEuclideanDistance() {\r\n    if (this.state.coords.length !== 0 && this.state.stationList.length !== 0) {\r\n      let lat = this.state.coords.coords.latitude\r\n      let long = this.state.coords.coords.longitude\r\n      \r\n      let mh = new MinHeap(this.state.stationList.length, (station) => {\r\n        return station.distance\r\n      })\r\n\r\n      for (let i = 0; i < this.state.stationList.length; i++) {\r\n        let station = this.state.stationList[i]\r\n        let station_lat = station.latitude\r\n        let station_long = station.longitude\r\n        let distance = this.euclideanDistance(lat, long, station_lat, station_long)\r\n        \r\n        station.distance = distance\r\n        mh.insert(station)\r\n      }\r\n      \r\n      mh.heap[0].station_name += ' [Nearest Geolocated Station]'\r\n      \r\n      this.setState({\r\n        selectedStation: {}\r\n      })\r\n      await this.setSelectedStationFromStation(mh.heap[0])\r\n\r\n      this.setState({\r\n        stationList: mh.heap\r\n      })\r\n    }\r\n  }\r\n  \r\n  async fetchStations() {\r\n    let stationsRequest = await fetch(STATIONS_URL)\r\n    let stationsData = await stationsRequest.json()\r\n        \r\n    this.setState({\r\n        stationList: stationsData\r\n      }\r\n    )\r\n  }\r\n\r\n  async setSelectedStationFromStation(station) {\r\n    let selectedStationData = await this.fetchStationData(station.station_id)\r\n\r\n    console.log(selectedStationData)\r\n    this.setState({\r\n      selectedStation: selectedStationData\r\n    })\r\n  }\r\n  \r\n  async setSelectedStationFromIndex(index) {\r\n    let station = this.state.stationList[index]\r\n    await this.setSelectedStationFromStation(station)\r\n  }\r\n  \r\n  async componentDidMount() {\r\n    await this.fetchStations()\r\n    await this.setSelectedStationFromIndex(0)\r\n    this.setUserCoordinates()\r\n  }\r\n  \r\n  render() {\r\n    return (\r\n      <React.Fragment>\r\n        <Container>\r\n          <Row>\r\n            <Col>\r\n              <StationList stationList={this.state.stationList} selectHandler={this.selectChangeHandler}/>\r\n            </Col>\r\n          </Row>\r\n          <Row>\r\n            <Col>\r\n              <Station stationData={this.state.selectedStation} />\r\n            </Col>\r\n          </Row>\r\n        </Container>\r\n      </React.Fragment>\r\n    )\r\n  }\r\n}\r\n\r\nexport default StationsContainer;","import React, { Component } from 'react';\r\nimport Navbar from 'react-bootstrap/Navbar'\r\n\r\n// import logo from './logo.svg';\r\nimport './App.css';\r\n\r\nclass TopNavBar extends Component {\r\n  render() {\r\n    return (\r\n      <React.Fragment>\r\n        <Navbar bg=\"dark\" variant=\"dark\">\r\n          <Navbar.Brand>Pollunator</Navbar.Brand>\r\n        </Navbar>\r\n      </React.Fragment>\r\n    )\r\n  }\r\n}\r\n\r\nexport default TopNavBar;\r\n","import React, { Component } from 'react';\nimport StationsContainer from './Stations'\nimport TopNavBar from './TopNavBar'\n\n// import logo from './logo.svg';\nimport './App.css';\n\nclass App extends Component {\n  render() {\n    return (\n      <React.Fragment>\n        <TopNavBar />\n        <StationsContainer />\n      </React.Fragment>\n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst API_URL = 'localhost:5000'\nconst PUBLIC_KEY_URI = `${API_URL}/publickey`\n\nfunction urlBase64ToUint8Array(base64String) {\n  const padding = '='.repeat((4 - base64String.length % 4) % 4);\n  const base64 = (base64String + padding)\n    .replace(/\\-/g, '+')\n    .replace(/_/g, '/')\n  ;\n  const rawData = window.atob(base64);\n  return Uint8Array.from([...rawData].map((char) => char.charCodeAt(0)));\n}\n\nasync function getPublicKeyArray() {\n  const response = await fetch(PUBLIC_KEY_URI)\n  const key = await response.text()\n\n  return urlBase64ToUint8Array(key)\n}\n\nasync function askPermission() {\n  return new Promise((resolve, reject) => {\n    const permissionResult = Notification.requestPermission((result) => {\n      resolve(result)\n    })\n    if (permissionResult) {\n      permissionResult.then(resolve, reject)\n    }\n  })\n  .then((permissionResult) => {\n    if (permissionResult !== 'granted') {\n      throw new Error('Permission denied')\n    }\n  })\n}\n\nasync function subscribe() {\n  navigator.serviceWorker.ready.then(registration => {\n    askPermission().then(() => {\n      const public_key = getPublicKeyArray()\n      \n    })\n  });\n}\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n// serviceWorker.subscribe()"],"sourceRoot":""}