{"version":3,"sources":["StationList.js","API.js","Helpers.js","Subscriber.js","Parameter.js","Station.js","MinHeap.js","Stations.js","TopNavBar.js","App.js","serviceWorker.js","index.js"],"names":["StationList","this","props","stationList","map","station","react_default","a","createElement","value","station_id","station_name","station_options","stationsRenderList","Fragment","Form_default","onChange","selectHandler","Group","controlId","Label","Control","as","Component","STATIONS_URL","concat","PUBLIC_KEY_URL","SUBSCRIBE_URL","urlBase64ToUint8Array","base64String","base64","repeat","length","replace","rawData","window","atob","Uint8Array","from","Object","toConsumableArray","char","charCodeAt","getPublicKeyArray","_callee","response","key","regenerator_default","wrap","_context","prev","next","fetch","sent","text","abrupt","stop","Subscriber","_this","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","onSubmitHandler","_ref","asyncToGenerator","mark","event","email","preventDefault","target","setState","subscribe","_x","apply","arguments","state","clicked","permission","subscripton","subscriptionResponse","subscription","subscribe_body","notify_time","method","headers","Content-Type","body","JSON","stringify","susbcribe_request","subscribe_json","json","Notification","requestPermission","permissionResult","registration","_ask_permission","public_key","options","userVisibleOnly","applicationServerKey","pushManager","_push_subscription","susbcription_response","navigator","serviceWorker","ready","_subscribe","onSubmit","name","type","placeholder","Button_default","variant","Parameter","param","parameterData","Card_default","style","width","Body","Title","Text","date","Station","stationData","parameters","src_Parameter","obj","station_data","keys","Header","status","latitude","longitude","CardColumns_default","_parameter_list","src_Subscriber","MinHeap","capacity","getValueMethod","heapSize","heap","Array","fill","getValue","Error","siftUp","i","j","index","minIndex","n","lc","rc","swap","siftDown","parent","Math","ceil","result","StationsContainer","selectChangeHandler","selectedStation","fetchStationData","stationDistanceList","coords","API_URL","station_data_request","station_data_json","station_el","filter","st","undefined","geolocation","setCoordState","pos","_this2","setStationOnEuclideanDistance","getCurrentPosition","x1","y1","x2","y2","sqrt","pow","lat","long","mh","distance","station_lat","station_long","euclideanDistance","insert","setSelectedStationFromStation","stationsRequest","stationsData","selectedStationData","fetchStations","setUserCoordinates","setSelectedStationFromIndex","Container_default","Row_default","Col_default","src_StationList","src_Station","TopNavBar","Navbar_default","bg","Brand","App","src_TopNavBar","Stations","isLocalhost","Boolean","location","hostname","match","registerValidSW","swUrl","config","register","then","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","src_App_0","document","getElementById","URL","process","href","origin","addEventListener","contentType","get","indexOf","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.8462a947.chunk.js","sourcesContent":["import React, { Component } from 'react'\r\nimport Form from 'react-bootstrap/Form'\r\n\r\nclass StationList extends Component {\r\n\r\n  stationsRenderList() {\r\n    let station_list = this.props.stationList   \r\n    let render_list = station_list.map( station => {\r\n      return <option value={station.station_id}>{station.station_name}</option>\r\n    })\r\n    return render_list\r\n  }\r\n\r\n  render() {\r\n    let station_options = this.stationsRenderList()\r\n    return (\r\n      <React.Fragment>\r\n        <Form onChange={this.props.selectHandler}>\r\n          <Form.Group controlId='formStationsList'>\r\n            <Form.Label>Stations</Form.Label>\r\n            <Form.Control controlId=\"station\" as='select'>\r\n              {station_options}\r\n            </Form.Control>\r\n          </Form.Group>\r\n        </Form>\r\n      </React.Fragment>\r\n    )\r\n  }\r\n}\r\n\r\nexport default StationList","const URL = ''\r\nconst STATIONS_URI = '/api/stations'\r\nconst PUBLIC_KEY_URI = '/api/publickey'\r\nconst SUBSCRIBE_URI = '/api/subscribe'\r\n\r\nconst STATIONS_URL = `${URL}${STATIONS_URI}`\r\nconst PUBLIC_KEY_URL = `${URL}${PUBLIC_KEY_URI}`\r\nconst SUBSCRIBE_URL = `${URL}${SUBSCRIBE_URI}`\r\n\r\nexport default URL;\r\nexport { STATIONS_URL, PUBLIC_KEY_URL, SUBSCRIBE_URL }\r\n","import { PUBLIC_KEY_URL } from './API.js'\r\n\r\nfunction urlBase64ToUint8Array(base64String) {\r\n    const padding = '='.repeat((4 - base64String.length % 4) % 4);\r\n    const base64 = (base64String + padding)\r\n        .replace(/\\-/g, '+')\r\n        .replace(/_/g, '/')\r\n    ;\r\n    const rawData = window.atob(base64);\r\n    return Uint8Array.from([...rawData].map((char) => char.charCodeAt(0)));\r\n}\r\n\r\nasync function getPublicKeyArray() {\r\n    const response = await fetch(PUBLIC_KEY_URL)\r\n    const key = await response.text()\r\n\r\n    return await urlBase64ToUint8Array(key)\r\n}\r\n\r\nexport { urlBase64ToUint8Array, getPublicKeyArray }","import React, { Component } from 'react'\r\nimport Form from 'react-bootstrap/Form'\r\nimport Button from 'react-bootstrap/Button'\r\n\r\nimport { getPublicKeyArray } from './Helpers'\r\nimport { SUBSCRIBE_URL } from './API'\r\n\r\nclass Subscriber extends Component {\r\n  constructor(props) {\r\n    super(props)\r\n    this.state = {\r\n      email: '',\r\n      clicked: false,\r\n      permission: false,\r\n      subscripton: {},\r\n      subscriptionResponse: {},\r\n    }\r\n  }\r\n\r\n  async _push_subscription(subscription) {\r\n    const email = this.state.email\r\n    const station_id = this.props.station_id;\r\n    const notify_time = '09:00'\r\n\r\n    const subscribe_body = {\r\n      station_id: station_id,\r\n      notify_time: notify_time,\r\n      email: email,\r\n      subscription: subscription\r\n    }\r\n    \r\n    const susbcribe_request = await fetch(SUBSCRIBE_URL, {\r\n      method: 'POST',\r\n      headers: {\r\n        'Content-Type': 'application/json'\r\n      },\r\n      body: JSON.stringify(subscribe_body)\r\n    })\r\n\r\n    const subscribe_json = susbcribe_request.json()\r\n\r\n    return subscribe_json\r\n  }\r\n  \r\n  async _ask_permission() {\r\n    const permissionResult = await Notification.requestPermission()\r\n    return permissionResult\r\n  }\r\n\r\n  async _subscribe(registration) {\r\n    const permissionResult = await this._ask_permission()\r\n    \r\n    if (permissionResult === 'granted') {\r\n      this.setState({\r\n        permission: true\r\n      })\r\n\r\n      const public_key = await getPublicKeyArray()\r\n\r\n      const options = {\r\n        userVisibleOnly: true,\r\n        applicationServerKey: public_key\r\n      }\r\n\r\n      const subscription = await registration.pushManager.subscribe(options)\r\n      this.setState({\r\n        subscription: subscription\r\n      })\r\n\r\n      let susbcription_response = await this._push_subscription(subscription)\r\n      this.setState({\r\n        subscriptionResponse: susbcription_response\r\n      })\r\n    }\r\n  }\r\n  \r\n  async subscribe() {\r\n    if ('serviceWorker' in navigator) {\r\n      const registration = await navigator.serviceWorker.ready\r\n      this._subscribe(registration)\r\n    }\r\n  }\r\n  \r\n  onSubmitHandler = async (event) => {\r\n    event.preventDefault()\r\n    const email = event.target.email.value\r\n    this.setState({\r\n      email: email\r\n    })\r\n    await this.subscribe()\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <React.Fragment>\r\n        <Form onSubmit={this.onSubmitHandler}>\r\n          <Form.Group controlId=\"formEmail\">\r\n            <Form.Control name='email' type=\"email\" placeholder=\"Enter email\" />\r\n          </Form.Group>\r\n          <Button variant=\"primary\" type=\"submit\">\r\n            Get Notified Daily!\r\n          </Button>\r\n        </Form>\r\n      </React.Fragment>\r\n    )\r\n  }\r\n}\r\n\r\nexport default Subscriber;","import React, { Component } from 'react'\r\nimport Card from 'react-bootstrap/Card'\r\n\r\nclass Parameter extends Component {\r\n  render() {\r\n    const param = this.props.parameterData\r\n    \r\n    return (\r\n      <React.Fragment>\r\n        <Card style={{ width: '18rem' }}>\r\n          <Card.Body>\r\n            <Card.Title>{param.name} | {param.value}</Card.Title>\r\n            <Card.Text>\r\n              \r\n            </Card.Text>\r\n            <Card.Text>\r\n              {param.date}\r\n            </Card.Text>\r\n          </Card.Body>\r\n        </Card>                                                     \r\n      </React.Fragment>\r\n    )\r\n  }\r\n}\r\n\r\nexport default Parameter","import React, { Component } from 'react';\r\nimport Card from 'react-bootstrap/Card'\r\nimport CardColumns from 'react-bootstrap/CardColumns'\r\n\r\nimport Subscriber from './Subscriber'\r\nimport Parameter from './Parameter'\r\n\r\nfunction isEmpty(obj) {\r\n  return Object.keys(obj).length === 0;\r\n}\r\n\r\nclass Station extends Component { \r\n  \r\n    _parameter_list() {\r\n      const parameters = this.props.stationData.parameters.parameters\r\n      const param_list = parameters.map(param => {\r\n        return <Parameter parameterData={param} />\r\n      })\r\n\r\n      return param_list      \r\n    }\r\n  \r\n    render() {\r\n      let station_data = this.props.stationData\r\n\r\n      return (\r\n        <React.Fragment>\r\n          { !isEmpty(station_data) ? (                         \r\n            <Card>\r\n              <Card.Header>{station_data.station_name}</Card.Header>\r\n              <Card.Body>\r\n                <Card.Title>{station_data.status}</Card.Title>\r\n                <Card.Text>\r\n                  Latitude: {station_data.latitude} Longitude: {station_data.longitude} Timestamp: {station_data.parameters.date}\r\n                </Card.Text>\r\n                <CardColumns>\r\n                  {this._parameter_list()}\r\n                </CardColumns>\r\n                <Card.Text>\r\n                  <Subscriber station_id={this.props.stationData.station_id} />\r\n                </Card.Text>\r\n                {/* <Button variant=\"primary\">Go somewhere</Button> */}\r\n              </Card.Body>\r\n            </Card>\r\n            ) : (\r\n              <React.Fragment></React.Fragment>\r\n            )\r\n          }\r\n        </React.Fragment>\r\n      )\r\n    }\r\n}\r\n\r\nexport default Station;","class MinHeap {\r\n    constructor(capacity, getValueMethod){\r\n        this.heapSize = -1;\r\n        this.heap = Array(capacity).fill(-1)\r\n        this.getValue = getValueMethod\r\n    }\r\n    \r\n    insert(value){\r\n        if(this.heapSize+1 === this.heap.length){\r\n            throw Error(\"Overflow Size\")\r\n        }\r\n        this.heap[this.heapSize + 1] = value\r\n        this.heapSize = this.heapSize + 1\r\n        this.siftUp(this.heapSize);\r\n    }\r\n    \r\n    swap(i,j){\r\n        [this.heap[i],this.heap[j]] = [this.heap[j],this.heap[i]]\r\n    }\r\n    \r\n    siftDown(index){\r\n        let minIndex = index\r\n        let n = this.heap.length\r\n        let lc = 2*index + 1\r\n        if(lc<=n-1 && this.getValue(this.heap[lc]) < this.getValue(this.heap[minIndex]) ) minIndex=lc\r\n        let rc = 2*index + 2\r\n        if(rc<=n-1 && this.getValue(this.heap[lc]) < this.getValue(this.heap[minIndex]) ) minIndex=rc\r\n\r\n        if(minIndex !== index){\r\n            this.swap(index,minIndex)\r\n            this.siftDown(minIndex)\r\n        }\r\n    }\r\n    \r\n    siftUp(index){\r\n        let parent  = Math.ceil((index-1)/2)\r\n        while(index>0 && this.getValue(this.heap[parent]) > this.getValue(this.heap[index]) ){\r\n            this.swap(index,parent)\r\n            index = parent\r\n            parent = Math.ceil((index-1)/2)\r\n        }\r\n    }\r\n\r\n    extractMin(){\r\n        let result  = this.heap[0]\r\n        this.heap[0] = this.heap[this.heapSize]\r\n        this.heapSize = this.heapSize - 1\r\n        this.siftDown(0)\r\n        return result\r\n    }\r\n\r\n}\r\n\r\nexport default MinHeap","import React, { Component } from 'react';\r\nimport Container from 'react-bootstrap/Container'\r\nimport Row from 'react-bootstrap/Row'\r\nimport Col from 'react-bootstrap/Col'\r\n\r\nimport StationList from './StationList'\r\nimport Station from './Station'\r\n\r\nimport MinHeap from './MinHeap'\r\n\r\nimport { STATIONS_URL } from './API'\r\n\r\nclass StationsContainer extends Component {\r\n  constructor(props) {\r\n    super(props)\r\n    this.state = {\r\n      stationList: [],\r\n      stationDistanceList: [],\r\n      coords: {},\r\n      selectedStation: {}\r\n    }\r\n  }\r\n\r\n  async fetchStationData(station_id) {\r\n    let API_URL = `${STATIONS_URL}/${station_id}`\r\n    let station_data_request = await fetch(API_URL);\r\n    let station_data_json = await station_data_request.json()\r\n\r\n    return station_data_json\r\n  }\r\n\r\n  getStationFromStationId(station_id) {\r\n    let station_el = this.state.stationList.filter( st => \r\n      st.station_id === station_id \r\n    )[0]\r\n\r\n    if (station_el === undefined) return {}\r\n\r\n    return station_el\r\n  }\r\n  \r\n  async setUserCoordinates() {\r\n    const geolocation = navigator.geolocation\r\n    \r\n    let setCoordState = (pos) => {\r\n      this.setState({\r\n        coords: pos\r\n      })\r\n      this.setStationOnEuclideanDistance()\r\n    }\r\n    \r\n    if (geolocation) { \r\n      await geolocation.getCurrentPosition(setCoordState)\r\n    }\r\n  }\r\n\r\n  selectChangeHandler = async (event) => {\r\n    this.setState({\r\n      selectedStation: {}\r\n    })\r\n    \r\n    let station_id = event.target.value\r\n    let station_data = await this.fetchStationData(station_id)\r\n\r\n    this.setState({\r\n      selectedStation: station_data\r\n    })\r\n  }\r\n  \r\n  euclideanDistance(x1, y1, x2, y2) {\r\n    return Math.sqrt(Math.pow(x1 - x2, 2) + Math.pow(y1 - y2, 2))\r\n  }\r\n  \r\n  async setStationOnEuclideanDistance() {\r\n    if (this.state.coords.length !== 0 && this.state.stationList.length !== 0) {\r\n      let lat = this.state.coords.coords.latitude\r\n      let long = this.state.coords.coords.longitude\r\n      \r\n      let mh = new MinHeap(this.state.stationList.length, (station) => {\r\n        return station.distance\r\n      })\r\n\r\n      for (let i = 0; i < this.state.stationList.length; i++) {\r\n        let station = this.state.stationList[i]\r\n        let station_lat = station.latitude\r\n        let station_long = station.longitude\r\n        let distance = this.euclideanDistance(lat, long, station_lat, station_long)\r\n        \r\n        station.distance = distance\r\n        mh.insert(station)\r\n      }\r\n      \r\n      mh.heap[0].station_name += ' [Nearest Geolocated Station]'\r\n      \r\n      this.setState({\r\n        selectedStation: {}\r\n      })\r\n      \r\n      this.setState({\r\n        stationList: mh.heap\r\n      })\r\n      await this.setSelectedStationFromStation(mh.heap[0])\r\n    }\r\n  }\r\n  \r\n  async fetchStations() {\r\n    let stationsRequest = await fetch(STATIONS_URL)\r\n    let stationsData = await stationsRequest.json()\r\n        \r\n    this.setState({\r\n        stationList: stationsData\r\n      }\r\n    )\r\n  }\r\n\r\n  async setSelectedStationFromStation(station) {\r\n    let selectedStationData = await this.fetchStationData(station.station_id)\r\n    \r\n    this.setState({\r\n      selectedStation: selectedStationData\r\n    })\r\n  }\r\n  \r\n  async setSelectedStationFromIndex(index) {\r\n    let station = this.state.stationList[index]\r\n    await this.setSelectedStationFromStation(station)\r\n  }\r\n  \r\n  async componentDidMount() {\r\n    await this.fetchStations()\r\n    this.setUserCoordinates()\r\n    await this.setSelectedStationFromIndex(0)\r\n  }\r\n  \r\n  render() {\r\n    return (\r\n      <React.Fragment>\r\n        <Container>\r\n          <Row>\r\n            <Col>\r\n              <StationList stationList={this.state.stationList} selectHandler={this.selectChangeHandler}/>\r\n            </Col>\r\n          </Row>\r\n          <Row>\r\n            <Col>\r\n              <Station stationData={this.state.selectedStation} />\r\n            </Col>\r\n          </Row>\r\n        </Container>\r\n      </React.Fragment>\r\n    )\r\n  }\r\n}\r\n\r\nexport default StationsContainer;","import React, { Component } from 'react';\r\nimport Navbar from 'react-bootstrap/Navbar'\r\n\r\n// import logo from './logo.svg';\r\nimport './App.css';\r\n\r\nclass TopNavBar extends Component {\r\n  render() {\r\n    return (\r\n      <React.Fragment>\r\n        <Navbar bg=\"dark\" variant=\"dark\">\r\n          <Navbar.Brand>Pollunator</Navbar.Brand>\r\n        </Navbar>\r\n      </React.Fragment>\r\n    )\r\n  }\r\n}\r\n\r\nexport default TopNavBar;\r\n","import React, { Component } from 'react';\nimport StationsContainer from './Stations'\nimport TopNavBar from './TopNavBar'\n\n// import logo from './logo.svg';\nimport './App.css';\n\nclass App extends Component {\n  render() {\n    return (\n      <React.Fragment>\n        <TopNavBar />\n        <StationsContainer />\n      </React.Fragment>\n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n              \r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();"],"sourceRoot":""}